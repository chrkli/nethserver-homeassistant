#!/usr/bin/bash

bridgeAeria=$(/sbin/e-smith/config getprop docker bridgeAeria)
macVlanNic=$(/sbin/e-smith/config getprop docker macVlanNic)
homeassistantNetwork=$(/sbin/e-smith/config getprop homeassistant haNetwork)
homeassistantMacVlanIP=$(/sbin/e-smith/config getprop homeassistant haMacVlanIP)
homeassistantAquaIP=$(/sbin/e-smith/config getprop homeassistant haAquaIP)

if [[ ${homeassistantNetwork} == 'aeria' ]];then
    if [[ -z ${bridgeAeria} ]]; then
        echo "# Bridge for aeria doesn't exist"
        exit 0
    fi
    HasNetwork=$(docker network ls -f name=aeria -q)
    if [[ $? != 0 ]]; then
        exit 1
    fi

    if [[ -z ${HasNetwork} ]]; then
        echo "# Aeria doesn't exist"
        exit 0
    fi
elif [[ ${homeassistantNetwork} == 'macvlan' ]];then
    if [[ -z ${macVlanNic} ]]; then
        echo "# Bridge for macvlan doesn't exist"
        exit 0
    fi
    HasNetwork=$(docker network ls -f name=macvlan -q)
    if [[ $? != 0 ]]; then
        exit 1
    fi

    if [[ -z ${HasNetwork} ]]; then
        echo "# Macvlan doesn't exist"
        exit 0
    fi
elif [[ ${homeassistantNetwork} == '' ]];then
    exit 0
fi

HasHomeassistant=$(docker ps -f name=homeassistant -q -a)
if [[ $? != 0 ]]; then
    exit 1
fi

if [[ -n ${HasHomeassistant} ]]; then
    echo "# homeassistant already exists"
    exit 0
fi

timezone=$(/sbin/e-smith/config getprop homeassistant timezone)
password=$(/sbin/e-smith/config getprop homeassistant password)
mac=$(/sbin/e-smith/config getprop homeassistant mac)

if [[ -z ${mac} ]]; then
    mac=00:60:2f$(od -txC -An -N3 /dev/random|tr \  :)
    /sbin/e-smith/config setprop homeassistant mac $mac
fi

if [[ ${homeassistantNetwork} == 'aeria' ]];then
docker run -d --name homeassistant \
    -v "/var/lib/homeassistant/config/:/config/" \
    -e TZ="$timezone" \
    -e WEBPASSWORD="$password"  \
    --hostname homeassistant.local \
    -e VIRTUAL_HOST="homeassistant.local" \
    -e IPv6="false" \
    --cap-add NET_ADMIN \
    --net=$homeassistantNetwork --mac-address=$mac \
    --restart=unless-stopped \
    homeassistant/homeassistant:stable

elif [[ ${homeassistantNetwork} == 'macvlan' ]];then
docker run -d --name homeassistant \
    -v "/var/lib/homeassistant/config/:/config/" \
    -e TZ="$timezone" \
    -e WEBPASSWORD="$password"  \
    --hostname homeassistant.local \
    -e VIRTUAL_HOST="homeassistant.local" \
    -e IPv6="false" \
    --cap-add NET_ADMIN \
    --ip=$homeassistantMacVlanIP \
    --net=$homeassistantNetwork \
    --restart=unless-stopped \
	homeassistant/homeassistant:stable

elif [[ ${homeassistantNetwork} == 'aqua' ]];then
#
# this is an hidden egg 
# do a reverse proxy homeassistant.local to http://172.28.45.10
# create a host self in nethserver 
#    pi.hole=self
#        Description=vhost Reverse
# set the dns server of NS to pihole (172.28.45.10)
docker run -d --name homeassistant \
    -v "/var/lib/homeassistant/config/:/config/" \
    -e TZ="$timezone" \
    -e WEBPASSWORD="$password"  \
    --hostname homeassistant.local \
    -e VIRTUAL_HOST="homeassistant.local" \
    -e IPv6="false" \
    --cap-add NET_ADMIN \
    --ip=$homeassistantAquaIP \
    --net=$homeassistantNetwork \
    --restart=unless-stopped \
    homeassistant/homeassistant:stable

fi
